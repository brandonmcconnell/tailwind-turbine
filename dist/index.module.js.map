{"version":3,"file":"index.module.js","sources":["../index.ts"],"sourcesContent":["import type { Config } from 'tailwindcss';\nimport tailwindPlugin from 'tailwindcss/plugin.js';\n\ntype PossiblyInvoked<T extends (...args: any[]) => any> = T | ReturnType<T>;\n\n// Plugin Types\ntype TailwindPluginBase = typeof tailwindPlugin;\ntype TailwindPlugin = ReturnType<TailwindPluginBase> | PossiblyInvoked<ReturnType<TailwindPluginBase['withOptions']>>;\ntype TurbinePluginBase = {\n  transform?: (config: NormalizedConfig) => NormalizedConfig;\n  plugins?: TailwindPlugin[];\n};\nexport type TurbinePlugin = TurbinePluginBase | ((...params: any[]) => TurbinePluginBase);\ntype Plugin = TurbinePlugin | TailwindPlugin;\n\n// Tailwind Plugin Type Guard\nfunction hasTailwindHandler(plugin: Plugin) {\n  return 'handler' in plugin && typeof plugin.handler === 'function';\n}\nfunction isTailwindPlugin(plugin: Plugin): plugin is TailwindPlugin {\n  const p = typeof plugin === 'function' ? plugin({}) : plugin;\n  return hasTailwindHandler(p);\n}\n\n// Turbine Plugin Type Guard\nfunction hasTurbineTransform(plugin: Plugin) {\n  return 'transform' in plugin && typeof plugin.transform === 'function';\n}\nfunction hasTurbinePlugins(plugin: Plugin) {\n  return 'plugins' in plugin && Array.isArray(plugin.plugins) && plugin.plugins.every(isTailwindPlugin);\n}\nfunction isTurbinePlugin(plugin: Plugin): plugin is TurbinePlugin {\n  const p = typeof plugin === 'function' ? plugin({}) : plugin;\n  return hasTurbineTransform(p) || hasTurbinePlugins(p);\n}\n\ntype NonNullableTheme = NonNullable<Config['theme']>;\ninterface NormalizedTheme extends NonNullableTheme {\n  // Responsiveness\n  supports: NonNullable<NonNullableTheme['supports']>;\n  data: NonNullable<NonNullableTheme['data']>;\n  // Reusable base configs\n  colors: NonNullable<NonNullableTheme['colors']>;\n  spacing: NonNullable<NonNullableTheme['spacing']>;\n  // Components\n  container: NonNullable<NonNullableTheme['container']>;\n}\n\ninterface NormalizedConfig extends Config {\n  safelist: NonNullable<Config['safelist']>;\n  blocklist: NonNullable<Config['blocklist']>;\n  presets: NonNullable<Config['presets']>;\n  theme: NormalizedTheme;\n  plugins: NonNullable<Config['plugins']>;\n}\n\nconst createNormalizedThemeObject = (): NormalizedTheme => ({\n  supports: {},\n  data: {},\n  colors: {},\n  spacing: {},\n  container: {},\n});\n\nconst normalizeConfig = (config: Config): NormalizedConfig => {\n  config.safelist ??= [] satisfies NormalizedConfig['safelist'];\n  config.blocklist ??= [] satisfies NormalizedConfig['blocklist'];\n  config.presets ??= [] satisfies NormalizedConfig['presets'];\n  config.theme = {\n    ...createNormalizedThemeObject(),\n    ...(config.theme ?? {}),\n    extend: {\n      ...createNormalizedThemeObject(),\n      ...(config.theme?.extend ?? {}),\n    },\n  } satisfies NormalizedTheme & { extend: NormalizedTheme };\n  config.theme.extend ??= {} satisfies NormalizedConfig['theme']['extend'];\n  config.plugins ??= [] satisfies NormalizedConfig['plugins'];\n  return config as NormalizedConfig;\n};\n\n// Turbine Plugin Builder\nconst Turbine = {\n  build({\n    config: CONFIG_RAW,\n    plugins,\n    // reporting, // Coming soon ðŸ‘€\n  }: {\n    config: Config;\n    plugins: Plugin[];\n    // reporting?: boolean;\n  }) {\n    let i = 0;\n    let config = normalizeConfig(CONFIG_RAW);\n    for (const plugin of plugins) {\n      if (isTailwindPlugin(plugin)) {\n        config.plugins.push(plugin);\n      } else if (isTurbinePlugin(plugin)) {\n        const { transform, plugins } = typeof plugin === 'function' ? plugin() : plugin;\n        if (transform) {\n          config = transform(config);\n        }\n        if (plugins) {\n          config.plugins.push(...plugins);\n        }\n      } else {\n        throw new Error(`Invalid Turbine plugin at position ${i}, did not match Tailwind CSS or Turbine plugin.`);\n      }\n      i++;\n    }\n    return config as NormalizedConfig;\n  },\n};\n\nexport default Turbine;\n"],"names":["isTailwindPlugin","plugin","handler","hasTailwindHandler","isTurbinePlugin","p","transform","hasTurbineTransform","Array","isArray","plugins","every","hasTurbinePlugins","Turbine","build","_ref","_step","i","config","_config$safelist","_config$theme","_config$theme$extend","_config$theme2","_config$theme3","safelist","_config$blocklist","blocklist","presets","theme","_extends","supports","data","colors","spacing","container","extend","createNormalizedThemeObject","_config$theme3$extend","_config$plugins","normalizeConfig","_iterator","_createForOfIteratorHelperLoose","done","value","push","Error","_config$plugins2","_ref2","apply"],"mappings":"8UAmBA,SAASA,EAAiBC,GAExB,OALF,SAA4BA,GAC1B,MAAO,YAAaA,GAAoC,mBAAnBA,EAAOC,OAC9C,CAGSC,CADqB,mBAAXF,EAAwBA,EAAO,CAAE,GAAIA,EAExD,CASA,SAASG,EAAgBH,GACvB,IAAMI,EAAsB,mBAAXJ,EAAwBA,EAAO,CAAE,GAAIA,EACtD,OARF,SAA6BA,GAC3B,MAAO,cAAeA,GAAsC,mBAArBA,EAAOK,SAChD,CAMSC,CAAoBF,IAL7B,SAA2BJ,GACzB,MAAO,YAAaA,GAAUO,MAAMC,QAAQR,EAAOS,UAAYT,EAAOS,QAAQC,MAAMX,EACtF,CAGmCY,CAAkBP,EACrD,CAsBA,IA0BMQ,EAAU,CACdC,MAAKA,SAAAC,GAWH,IAVQ,IAUoBC,EAT5BN,EAAOK,EAAPL,QAOIO,EAAI,EACJC,EA7BgB,SAACA,GAAoCC,IAAAC,EAAAC,EAAAC,EAAAC,EAc3D,OAbe,MAAfL,EAAOM,WAAPN,EAAOM,SAAa,IACJC,MAAhBP,EAAOQ,YAAPR,EAAOQ,UAAc,IACP,MAAdR,EAAOS,UAAPT,EAAOS,QAAY,IACnBT,EAAOU,MAAKC,EAAA,CAAA,EAZ8C,CAC1DC,SAAU,CAAA,EACVC,KAAM,CAAA,EACNC,OAAQ,CAAA,EACRC,QAAS,CAAA,EACTC,UAAW,CAAA,GASO,OADgBd,EAC5BF,EAAOU,OAAKR,EAAI,CAAA,EACpBe,CAAAA,OAAMN,EACDO,CAAAA,EAhBmD,CAC1DN,SAAU,CAAA,EACVC,KAAM,CAAA,EACNC,OAAQ,CAAA,EACRC,QAAS,CAAA,EACTC,UAAW,CAAA,GAYiBb,OADQA,EAC5BC,OAD4BA,EAC5BJ,EAAOU,YAAPN,EAAAA,EAAca,QAAMd,EAAI,CAAE,KAGfgB,OAAnBd,EAAAL,EAAOU,OAAMO,SAAbZ,EAAaY,OAAW,CAAA,GACVG,MAAdpB,EAAOR,UAAPQ,EAAOR,QAAY,IACZQ,CACT,CAciBqB,CATKxB,EAAlBG,QAUAsB,2qBAAAC,CAAqB/B,KAAOM,EAAAwB,KAAAE,MAAE,CAAnB,IAAAzC,EAAMe,EAAA2B,MACf,GAAI3C,EAAiBC,GACnBiB,EAAOR,QAAQkC,KAAK3C,OACf,KAAIG,EAAgBH,GASzB,MAAU,IAAA4C,MAAK,sCAAuC5B,EAAC,mDARvD,IAIa6B,EAJbC,EAAiD,mBAAX9C,EAAwBA,IAAWA,EAAjEK,EAASyC,EAATzC,UAAWI,EAAOqC,EAAPrC,QACfJ,IACFY,EAASZ,EAAUY,IAEjBR,IACFoC,EAAA5B,EAAOR,SAAQkC,KAAII,MAAAF,EAAIpC,EAI3B,CACAO,GACF,CACA,OAAOC,CACT"}