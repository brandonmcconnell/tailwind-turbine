{"version":3,"file":"index.modern.js","sources":["../index.ts"],"sourcesContent":["import type { Config } from 'tailwindcss';\nimport tailwindPlugin from 'tailwindcss/plugin.js';\n\ntype PossiblyInvoked<T extends (...args: any[]) => any> = T | ReturnType<T>;\n\n// Plugin Types\ntype TailwindPluginBase = typeof tailwindPlugin;\ntype TailwindPlugin = ReturnType<TailwindPluginBase> | PossiblyInvoked<ReturnType<TailwindPluginBase['withOptions']>>;\ntype TurbinePluginBase = {\n  transform?: (config: NormalizedConfig) => NormalizedConfig;\n  plugins?: TailwindPlugin[];\n};\nexport type TurbinePlugin = TurbinePluginBase | ((...params: any[]) => TurbinePluginBase);\ntype Plugin = TurbinePlugin | TailwindPlugin;\n\n// Tailwind Plugin Type Guard\nfunction hasTailwindHandler(plugin: Plugin) {\n  return 'handler' in plugin && typeof plugin.handler === 'function';\n}\nfunction isTailwindPlugin(plugin: Plugin): plugin is TailwindPlugin {\n  const p = typeof plugin === 'function' ? plugin({}) : plugin;\n  return hasTailwindHandler(p);\n}\n\n// Turbine Plugin Type Guard\nfunction hasTurbineTransform(plugin: Plugin) {\n  return 'transform' in plugin && typeof plugin.transform === 'function';\n}\nfunction hasTurbinePlugins(plugin: Plugin) {\n  return 'plugins' in plugin && Array.isArray(plugin.plugins) && plugin.plugins.every(isTailwindPlugin);\n}\nfunction isTurbinePlugin(plugin: Plugin): plugin is TurbinePlugin {\n  const p = typeof plugin === 'function' ? plugin({}) : plugin;\n  return hasTurbineTransform(p) || hasTurbinePlugins(p);\n}\n\ntype NonNullableTheme = NonNullable<Config['theme']>;\ninterface NormalizedTheme extends NonNullableTheme {\n  // Responsiveness\n  supports: NonNullable<NonNullableTheme['supports']>;\n  data: NonNullable<NonNullableTheme['data']>;\n  // Reusable base configs\n  colors: NonNullable<NonNullableTheme['colors']>;\n  spacing: NonNullable<NonNullableTheme['spacing']>;\n  // Components\n  container: NonNullable<NonNullableTheme['container']>;\n}\n\ninterface NormalizedConfig extends Config {\n  safelist: NonNullable<Config['safelist']>;\n  blocklist: NonNullable<Config['blocklist']>;\n  presets: NonNullable<Config['presets']>;\n  theme: NormalizedTheme;\n  plugins: NonNullable<Config['plugins']>;\n}\n\nconst createNormalizedThemeObject = (): NormalizedTheme => ({\n  supports: {},\n  data: {},\n  colors: {},\n  spacing: {},\n  container: {},\n});\n\nconst normalizeConfig = (config: Config): NormalizedConfig => {\n  config.safelist ??= [] satisfies NormalizedConfig['safelist'];\n  config.blocklist ??= [] satisfies NormalizedConfig['blocklist'];\n  config.presets ??= [] satisfies NormalizedConfig['presets'];\n  config.theme = {\n    ...createNormalizedThemeObject(),\n    ...(config.theme ?? {}),\n    extend: {\n      ...createNormalizedThemeObject(),\n      ...(config.theme?.extend ?? {}),\n    },\n  } satisfies NormalizedTheme & { extend: NormalizedTheme };\n  config.theme.extend ??= {} satisfies NormalizedConfig['theme']['extend'];\n  config.plugins ??= [] satisfies NormalizedConfig['plugins'];\n  return config as NormalizedConfig;\n};\n\n// Turbine Plugin Builder\nconst Turbine = {\n  build({\n    config: CONFIG_RAW,\n    plugins,\n    // reporting, // Coming soon ðŸ‘€\n  }: {\n    config: Config;\n    plugins: Plugin[];\n    // reporting?: boolean;\n  }) {\n    let i = 0;\n    let config = normalizeConfig(CONFIG_RAW);\n    for (const plugin of plugins) {\n      if (isTailwindPlugin(plugin)) {\n        config.plugins.push(plugin);\n      } else if (isTurbinePlugin(plugin)) {\n        const { transform, plugins } = typeof plugin === 'function' ? plugin() : plugin;\n        if (transform) {\n          config = transform(config);\n        }\n        if (plugins) {\n          config.plugins.push(...plugins);\n        }\n      } else {\n        throw new Error(`Invalid Turbine plugin at position ${i}, did not match Tailwind CSS or Turbine plugin.`);\n      }\n      i++;\n    }\n    return config as NormalizedConfig;\n  },\n};\n\nexport default Turbine;\n"],"names":["isTailwindPlugin","plugin","handler","hasTailwindHandler","isTurbinePlugin","p","transform","hasTurbineTransform","Array","isArray","plugins","every","hasTurbinePlugins","Turbine","build","config","CONFIG_RAW","i","_config$theme","_config$theme$extend","_config$theme2","_config$theme3","_config$safelist","safelist","_config$blocklist","blocklist","_config$presets","presets","theme","_extends","createNormalizedThemeObject","supports","data","colors","spacing","container","extend","_config$plugins","normalizeConfig","push","Error"],"mappings":"oOAmBA,SAASA,EAAiBC,GAExB,OALF,SAA4BA,GAC1B,MAAO,YAAaA,GAAoC,mBAAnBA,EAAOC,OAC9C,CAGSC,CADqB,mBAAXF,EAAwBA,EAAO,IAAMA,EAExD,CASA,SAASG,EAAgBH,GACvB,MAAMI,EAAsB,mBAAXJ,EAAwBA,EAAO,CAAA,GAAMA,EACtD,OARF,SAA6BA,GAC3B,MAAO,cAAeA,GAAsC,mBAArBA,EAAOK,SAChD,CAMSC,CAAoBF,IAL7B,SAA2BJ,GACzB,MAAO,YAAaA,GAAUO,MAAMC,QAAQR,EAAOS,UAAYT,EAAOS,QAAQC,MAAMX,EACtF,CAGmCY,CAAkBP,EACrD,CAsBA,MA0BMQ,EAAU,CACdC,KAAAA,EACEC,OAAQC,EAAUN,QAClBA,IAOA,IAAIO,EAAI,EACJF,EA7BiBA,SAAoCG,EAAAC,EAAAC,EAAAC,EAc3D,OAbeC,MAAfP,EAAOQ,WAAPR,EAAOQ,SAAa,IACJC,MAAhBT,EAAOU,YAAPV,EAAOU,UAAc,IACPC,MAAdX,EAAOY,UAAPZ,EAAOY,QAAY,IACnBZ,EAAOa,MAAKC,EACPC,CAAAA,GAZLC,SAAU,CAAA,EACVC,KAAM,CAAE,EACRC,OAAQ,CAAE,EACVC,QAAS,CAAA,EACTC,UAAW,CAAA,GASOjB,OADgBA,EAC5BH,EAAOa,OAAKV,EAAI,GACpBkB,CAAAA,OAAMP,EACDC,IAfPC,SAAU,CAAA,EACVC,KAAM,CAAE,EACRC,OAAQ,CAAE,EACVC,QAAS,CAAA,EACTC,UAAW,CAAA,GAYiB,OADQhB,EAChB,OADgBC,EAC5BL,EAAOa,YAAK,EAAZR,EAAcgB,QAAMjB,EAAI,CAAA,KAGb,OAAnBE,EAAAN,EAAOa,OAAMQ,SAAbf,EAAae,OAAW,CAAA,GACVC,MAAdtB,EAAOL,UAAPK,EAAOL,QAAY,IACZK,GAeQuB,CAAgBtB,GAC7B,IAAK,MAAMf,KAAUS,EAAS,CAC5B,GAAIV,EAAiBC,GACnBc,EAAOL,QAAQ6B,KAAKtC,OACf,KAAIG,EAAgBH,GASzB,MAAM,IAAIuC,4CAA4CvB,oDATpB,CAClC,MAAMX,UAAEA,EAAWI,QAAAA,GAA8B,mBAAXT,EAAwBA,IAAWA,EACrEK,IACFS,EAAST,EAAUS,IAEjBL,GACFK,EAAOL,QAAQ6B,QAAQ7B,EAE3B,CAEA,CACAO,GACF,CACA,OAAOF,CACT"}