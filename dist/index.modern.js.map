{"version":3,"file":"index.modern.js","sources":["../index.ts"],"sourcesContent":["import type { Config } from 'tailwindcss';\nimport tailwindPlugin from 'tailwindcss/plugin.js';\n\ntype PossiblyInvoked<T extends (...args: any[]) => any> = T | ReturnType<T>;\n\n// Plugin Types\ntype TailwindPluginBase = typeof tailwindPlugin;\ntype TailwindPlugin = ReturnType<TailwindPluginBase> | PossiblyInvoked<ReturnType<TailwindPluginBase['withOptions']>>;\ntype TurbinePluginBase = {\n  transform?: (config: NormalizedConfig) => NormalizedConfig;\n  plugins?: TailwindPlugin[];\n};\nexport type TurbinePlugin = TurbinePluginBase | ((...params: any[]) => TurbinePluginBase);\ntype Plugin = TurbinePlugin | TailwindPlugin;\n\n// Tailwind Plugin Type Guard\nfunction hasTailwindHandler(plugin: Plugin) {\n  return 'handler' in plugin && typeof plugin.handler === 'function';\n}\nfunction isTailwindPlugin(plugin: Plugin): plugin is TailwindPlugin {\n  if (hasTailwindHandler(plugin)) return true;\n  if (typeof plugin === 'function' && hasTailwindHandler(plugin({}))) return true;\n  return false;\n}\n\n// Turbine Plugin Type Guard\nfunction hasTurbineTransform(plugin: Plugin) {\n  return 'transform' in plugin && typeof plugin.transform === 'function';\n}\nfunction isTurbinePlugin(plugin: Plugin): plugin is TurbinePlugin {\n  if (hasTurbineTransform(plugin)) return true;\n  if (typeof plugin === 'function' && hasTurbineTransform(plugin({}))) return true;\n  return false;\n}\n\ntype NonNullableTheme = NonNullable<Config['theme']>;\ninterface NormalizedTheme extends NonNullableTheme {\n  // Responsiveness\n  supports: NonNullable<NonNullableTheme['supports']>;\n  data: NonNullable<NonNullableTheme['data']>;\n  // Reusable base configs\n  colors: NonNullable<NonNullableTheme['colors']>;\n  spacing: NonNullable<NonNullableTheme['spacing']>;\n  // Components\n  container: NonNullable<NonNullableTheme['container']>;\n}\n\ninterface NormalizedConfig extends Config {\n  safelist: NonNullable<Config['safelist']>;\n  blocklist: NonNullable<Config['blocklist']>;\n  presets: NonNullable<Config['presets']>;\n  theme: NormalizedTheme;\n  plugins: NonNullable<Config['plugins']>;\n}\n\nconst createNormalizedThemeObject = (): NormalizedTheme => ({\n  supports: {},\n  data: {},\n  colors: {},\n  spacing: {},\n  container: {},\n});\n\nconst normalizeConfig = (config: Config): NormalizedConfig => {\n  config.safelist ??= [] satisfies NormalizedConfig['safelist'];\n  config.blocklist ??= [] satisfies NormalizedConfig['blocklist'];\n  config.presets ??= [] satisfies NormalizedConfig['presets'];\n  config.theme = {\n    ...createNormalizedThemeObject(),\n    ...(config.theme ?? {}),\n    extend: {\n      ...createNormalizedThemeObject(),\n      ...(config.theme?.extend ?? {}),\n    },\n  } satisfies NormalizedTheme & { extend: NormalizedTheme };\n  config.theme.extend ??= {} satisfies NormalizedConfig['theme']['extend'];\n  config.plugins ??= [] satisfies NormalizedConfig['plugins'];\n  return config as NormalizedConfig;\n};\n\n// Turbine Plugin Builder\nconst Turbine = {\n  build({\n    config: CONFIG_RAW,\n    plugins,\n    // reporting, // Coming soon ðŸ‘€\n  }: {\n    config: Config;\n    plugins: Plugin[];\n    // reporting?: boolean;\n  }) {\n    let i = 0;\n    let config = normalizeConfig(CONFIG_RAW);\n    for (const plugin of plugins) {\n      if (isTailwindPlugin(plugin)) {\n        config.plugins.push(plugin);\n      } else if (isTurbinePlugin(plugin)) {\n        const { transform, plugins } = typeof plugin === 'function' ? plugin() : plugin;\n        if (transform) {\n          config = transform(config);\n        }\n        if (plugins) {\n          config.plugins.push(...plugins);\n        }\n      } else {\n        throw new Error(`Invalid Turbine plugin at position ${i}, did not match Tailwind CSS or Turbine plugin.`);\n      }\n      i++;\n    }\n    return config as NormalizedConfig;\n  },\n};\n\nexport default Turbine;\n"],"names":["hasTailwindHandler","plugin","handler","isTailwindPlugin","hasTurbineTransform","transform","isTurbinePlugin","Turbine","build","config","CONFIG_RAW","plugins","i","_config$theme","_config$theme$extend","_config$theme2","_config$theme3","_config$safelist","safelist","blocklist","_config$presets","presets","theme","_extends","createNormalizedThemeObject","supports","data","colors","spacing","container","extend","normalizeConfig","push","Error"],"mappings":"oOAgBA,SAASA,EAAmBC,GAC1B,MAAO,YAAaA,GAAoC,mBAAnBA,EAAOC,OAC9C,CACA,SAASC,EAAiBF,GACxB,QAAID,EAAmBC,MACD,mBAAXA,IAAyBD,EAAmBC,EAAO,CAAE,IAElE,CAGA,SAASG,EAAoBH,GAC3B,MAAO,cAAeA,GAAsC,mBAArBA,EAAOI,SAChD,CACA,SAASC,EAAgBL,GACvB,QAAIG,EAAoBH,MACF,mBAAXA,IAAyBG,EAAoBH,EAAO,CAAE,IAEnE,CAsBA,MA0BMM,EAAU,CACdC,KAAAA,EACEC,OAAQC,EAAUC,QAClBA,IAOA,IAAIC,EAAI,EACJH,EA7BiBA,KAAoC,IAAAI,EAAAC,EAAAC,EAAAC,EAc3D,OAbeC,MAAfR,EAAOS,WAAPT,EAAOS,SAAa,IACJ,MAAhBT,EAAOU,YAAPV,EAAOU,UAAc,IACPC,MAAdX,EAAOY,UAAPZ,EAAOY,QAAY,IACnBZ,EAAOa,MAAKC,EACPC,CAAAA,GAZLC,SAAU,CAAE,EACZC,KAAM,CAAA,EACNC,OAAQ,CAAA,EACRC,QAAS,CAAE,EACXC,UAAW,IASOhB,OADgBA,EAC5BJ,EAAOa,OAAKT,EAAI,CAAA,EAAE,CACtBiB,OAAMP,EACDC,CAAAA,GAfPC,SAAU,CAAE,EACZC,KAAM,CAAA,EACNC,OAAQ,CAAA,EACRC,QAAS,CAAE,EACXC,UAAW,IAYiBf,OADQA,EAC5BC,OAD4BA,EAC5BN,EAAOa,YAAPP,EAAAA,EAAce,QAAMhB,EAAI,CAAA,KAGb,OAAnBE,EAAAP,EAAOa,OAAMQ,SAAbd,EAAac,OAAW,CAAA,GACV,MAAdrB,EAAOE,UAAPF,EAAOE,QAAY,IACZF,GAeQsB,CAAgBrB,GAC7B,IAAK,MAAMT,KAAUU,EAAS,CAC5B,GAAIR,EAAiBF,GACnBQ,EAAOE,QAAQqB,KAAK/B,OACXK,KAAAA,EAAgBL,GASzB,MAAM,IAAIgC,4CAA4CrB,oDATpB,CAClC,MAAMP,UAAEA,EAAWM,QAAAA,GAA8B,mBAAXV,EAAwBA,IAAWA,EACrEI,IACFI,EAASJ,EAAUI,IAEjBE,GACFF,EAAOE,QAAQqB,QAAQrB,EAE3B,CAEA,CACAC,GACF,CACA,OAAOH,CACT"}