{"version":3,"file":"index.modern.js","sources":["../index.ts"],"sourcesContent":["import type { Config } from 'tailwindcss';\nimport type { ResolvableTo } from 'tailwindcss/types/config.d.ts';\nimport tailwindPlugin from 'tailwindcss/plugin.js';\n\ntype PossiblyInvoked<T extends (...args: any[]) => any> = T | ReturnType<T>;\n\n// Plugin Types\ntype TailwindPluginBase = typeof tailwindPlugin;\ntype TailwindPlugin = ReturnType<TailwindPluginBase> | PossiblyInvoked<ReturnType<TailwindPluginBase['withOptions']>>;\ntype TurbinePluginBase = {\n  transform?: (config: NormalizedConfig) => NormalizedConfig;\n  plugins?: TailwindPlugin[];\n};\nexport type TurbinePlugin = TurbinePluginBase | ((...params: any[]) => TurbinePluginBase);\ntype Plugin = TurbinePlugin | TailwindPlugin;\n\n// Tailwind Plugin Type Guard\nfunction hasTailwindHandler(plugin: Plugin) {\n  return 'handler' in plugin && typeof plugin.handler === 'function';\n}\nfunction isTailwindPlugin(plugin: Plugin): plugin is TailwindPlugin {\n  const p = typeof plugin === 'function' ? plugin({}) : plugin;\n  return p && hasTailwindHandler(p);\n}\n\n// Turbine Plugin Type Guard\nfunction hasTurbineTransform(plugin: Plugin) {\n  return 'transform' in plugin && typeof plugin.transform === 'function';\n}\nfunction hasTurbinePlugins(plugin: Plugin) {\n  return 'plugins' in plugin && Array.isArray(plugin.plugins) && plugin.plugins.every(isTailwindPlugin);\n}\nfunction isTurbinePlugin(plugin: Plugin): plugin is TurbinePlugin {\n  const p = typeof plugin === 'function' ? plugin({}) : plugin;\n  return p && (hasTurbineTransform(p) || hasTurbinePlugins(p));\n}\n\ntype NonNullableTheme = NonNullable<Config['theme']>;\ninterface NormalizedTheme extends NonNullableTheme {\n  // Responsiveness\n  supports: NonNullable<NonNullableTheme['supports']>;\n  data: NonNullable<NonNullableTheme['data']>;\n  // Reusable base configs\n  colors: NonNullable<NonNullableTheme['colors']>;\n  spacing: NonNullable<NonNullableTheme['spacing']>;\n  // Components\n  container: NonNullable<NonNullableTheme['container']>;\n}\n\ninterface NormalizedThemeWithExtend extends NormalizedTheme {\n  extend: NormalizedTheme;\n}\n\ninterface NormalizedConfig extends Config {\n  content: NonNullable<Config['content']>;\n  safelist: NonNullable<Config['safelist']>;\n  blocklist: NonNullable<Config['blocklist']>;\n  presets: NonNullable<Config['presets']>;\n  theme: NormalizedThemeWithExtend;\n  plugins: NonNullable<Config['plugins']>;\n}\n\nconst createNormalizedThemeObject = (): NormalizedTheme => ({\n  supports: {},\n  data: {},\n  colors: {},\n  spacing: {},\n  container: {},\n});\n\nconst normalizeConfig = (config: Partial<Config> | undefined = {}): NormalizedConfig => {\n  if (\n    !config.content ||\n    (Array.isArray(config.content) && config.content.length === 0) ||\n    (!Array.isArray(config.content) && config.content.files.length === 0)\n  ) {\n    console.warn(\n      'Empty `content` or `content.files` value found in `config`. This may yield unexpected results, as your project files may not be scanned by Tailwind CSS.'\n    );\n  }\n  config.content = {\n    files: Array.isArray(config.content) ? config.content : [],\n    ...(config.content && !Array.isArray(config.content) ? config.content : {}),\n  } satisfies NormalizedConfig['content'];\n  config.safelist ??= [] satisfies NormalizedConfig['safelist'];\n  config.blocklist ??= [] satisfies NormalizedConfig['blocklist'];\n  config.presets ??= [] satisfies NormalizedConfig['presets'];\n  config.theme = {\n    ...createNormalizedThemeObject(),\n    ...(config.theme ?? {}),\n    extend: {\n      ...createNormalizedThemeObject(),\n      ...(config.theme?.extend ?? {}),\n    } satisfies NormalizedTheme,\n  } satisfies NormalizedThemeWithExtend;\n  config.plugins ??= [] satisfies NormalizedConfig['plugins'];\n  return config as NormalizedConfig;\n};\n\n// Turbine Plugin Builder\nexport const build = ({\n  config: CONFIG_RAW,\n  plugins,\n  // reporting, // Coming soon ðŸ‘€\n}: {\n  config: Partial<Config>;\n  plugins: Plugin[];\n  // reporting?: boolean;\n}) => {\n  let i = 0;\n  let config = normalizeConfig(CONFIG_RAW);\n  for (const plugin of plugins) {\n    if (isTailwindPlugin(plugin)) {\n      config.plugins.push(plugin);\n    } else if (isTurbinePlugin(plugin)) {\n      const { transform, plugins } = typeof plugin === 'function' ? plugin() : plugin;\n      if (transform) {\n        config = transform(config);\n      }\n      if (plugins) {\n        config.plugins.push(\n          ...plugins.filter((plugin, j) => {\n            if (isTailwindPlugin(plugin)) return true;\n            console.warn(\n              `Invalid Tailwind CSS plugin found at position ${j} in Turbine plugin at position ${i}, skipping.`\n            );\n            return false;\n          })\n        );\n      }\n    } else {\n      throw new Error(`Invalid Turbine plugin at position ${i}, did not match Tailwind CSS or Turbine plugin.`);\n    }\n    i++;\n  }\n  return config as NormalizedConfig;\n};\n\ntype ResolvableToFn<T> = Extract<ResolvableTo<T>, (...args: any[]) => any>;\ntype ResolvableToParameters<T> = Parameters<ResolvableToFn<T>>;\ntype PluginUtils<T> = ResolvableToParameters<T>[0];\n\nexport const resolvePluginUtils = <T, U>(value: ResolvableTo<T>, callback: (resolvedValue: T) => U) =>\n  typeof value === 'function'\n    ? (utils: PluginUtils<T>) => callback((value as ResolvableToFn<T>)(utils))\n    : callback(value);\n\nexport const resolveThemeExtend = <Theme extends NormalizedTheme>(\n  theme: Theme,\n  callback: (theme: Theme) => unknown\n) => {\n  callback(theme);\n  callback(theme.extend as Theme);\n};\n"],"names":["isTailwindPlugin","plugin","p","handler","hasTailwindHandler","isTurbinePlugin","transform","hasTurbineTransform","Array","isArray","plugins","every","hasTurbinePlugins","build","config","CONFIG_RAW","i","normalizeConfig","_config$safelist","_config$theme","_config$theme$extend","_config$theme2","content","length","files","console","warn","_extends","safelist","_config$blocklist","blocklist","_config$presets","presets","theme","supports","data","colors","spacing","container","extend","push","Error","filter","j","resolvePluginUtils","value","callback","utils","resolveThemeExtend"],"mappings":"oOAoBA,SAASA,EAAiBC,GACxB,MAAMC,EAAsB,mBAAXD,EAAwBA,EAAO,IAAMA,EACtD,OAAOC,GALT,SAA4BD,GAC1B,MAAO,YAAaA,GAAoC,mBAAnBA,EAAOE,OAC9C,CAGcC,CAAmBF,EACjC,CASA,SAASG,EAAgBJ,GACvB,MAAMC,EAAsB,mBAAXD,EAAwBA,EAAO,CAAE,GAAIA,EACtD,OAAOC,IART,SAA6BD,GAC3B,MAAO,cAAeA,GAAsC,mBAArBA,EAAOK,SAChD,CAMeC,CAAoBL,IALnC,SAA2BD,GACzB,MAAO,YAAaA,GAAUO,MAAMC,QAAQR,EAAOS,UAAYT,EAAOS,QAAQC,MAAMX,EACtF,CAGyCY,CAAkBV,GAC3D,CA2BA,MAsCaW,EAAQA,EACnBC,OAAQC,EACRL,cAOA,IAAIM,EAAI,EACJF,EAxCkBG,EAACH,EAAsC,CAAA,KAAwBI,IAAAC,EAAAC,EAAAC,EA0BrF,QAxBGP,EAAOQ,SACPd,MAAMC,QAAQK,EAAOQ,UAAsC,IAA1BR,EAAOQ,QAAQC,SAC/Cf,MAAMC,QAAQK,EAAOQ,UAA4C,IAAhCR,EAAOQ,QAAQE,MAAMD,SAExDE,QAAQC,KACN,4JAGJZ,EAAOQ,QAAOK,EAAA,CACZH,MAAOhB,MAAMC,QAAQK,EAAOQ,SAAWR,EAAOQ,QAAU,IACpDR,EAAOQ,UAAYd,MAAMC,QAAQK,EAAOQ,SAAWR,EAAOQ,QAAU,CAAA,SAE1ER,EAAOc,WAAPd,EAAOc,SAAa,IACJC,MAAhBf,EAAOgB,YAAPhB,EAAOgB,UAAc,IACPC,MAAdjB,EAAOkB,UAAPlB,EAAOkB,QAAY,IACnBlB,EAAOmB,MAAKN,KAzB8C,CAC1DO,SAAU,GACVC,KAAM,CAAA,EACNC,OAAQ,CAAE,EACVC,QAAS,CAAA,EACTC,UAAW,CACZ,UAoBmCnB,EAC5BL,EAAOmB,OAAKd,EAAI,CAAE,GACtBoB,OAAMZ,EAAA,CAAA,EA5BkD,CAC1DO,SAAU,GACVC,KAAM,CAAA,EACNC,OAAQ,CAAE,EACVC,QAAS,CAAA,EACTC,UAAW,CACZ,UAuBqClB,EAC5BC,OAD4BA,EAC5BP,EAAOmB,YAAPZ,EAAAA,EAAckB,QAAMnB,EAAI,CAAE,WAGlCN,EAAOJ,UAAPI,EAAOJ,QAAY,IACZI,GAcMG,CAAgBF,GAC7B,IAAK,MAAMd,KAAUS,EAAS,CAC5B,GAAIV,EAAiBC,GACnBa,EAAOJ,QAAQ8B,KAAKvC,YACXI,EAAgBJ,GAiBzB,MAAU,IAAAwC,4CAA4CzB,oDAjBpB,CAClC,MAAMV,UAAEA,EAAWI,QAAAA,GAA8B,mBAAXT,EAAwBA,IAAWA,EACrEK,IACFQ,EAASR,EAAUQ,IAEjBJ,GACFI,EAAOJ,QAAQ8B,QACV9B,EAAQgC,OAAO,CAACzC,EAAQ0C,MACrB3C,EAAiBC,KACrBwB,QAAQC,KACN,iDAAiDiB,mCAAmC3B,iBAE/E,IAIf,CAEA,CACAA,GACF,CACA,OAAOF,GAOI8B,EAAqBA,CAAOC,EAAwBC,IAC9C,mBAAVD,EACFE,GAA0BD,EAAUD,EAA4BE,IACjED,EAASD,GAEFG,EAAqBA,CAChCf,EACAa,KAEAA,EAASb,GACTa,EAASb,EAAMM,OACjB"}